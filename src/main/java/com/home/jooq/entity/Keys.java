/*
 * This file is generated by jOOQ.
 */
package com.home.jooq.entity;


import com.home.jooq.entity.tables.Article;
import com.home.jooq.entity.tables.Author;
import com.home.jooq.entity.tables.records.ArticleRecord;
import com.home.jooq.entity.tables.records.AuthorRecord;

import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables of 
 * the <code>testing</code> schema.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // IDENTITY definitions
    // -------------------------------------------------------------------------


    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<ArticleRecord> ARTICLE_PKEY = UniqueKeys0.ARTICLE_PKEY;
    public static final UniqueKey<AuthorRecord> AUTHOR_PKEY = UniqueKeys0.AUTHOR_PKEY;

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<ArticleRecord, AuthorRecord> ARTICLE__FK_AUTHOR_ID = ForeignKeys0.ARTICLE__FK_AUTHOR_ID;

    // -------------------------------------------------------------------------
    // [#1459] distribute members to avoid static initialisers > 64kb
    // -------------------------------------------------------------------------

    private static class UniqueKeys0 {
        public static final UniqueKey<ArticleRecord> ARTICLE_PKEY = Internal.createUniqueKey(Article.ARTICLE, "ARTICLE_pkey", new TableField[] { Article.ARTICLE.ID }, true);
        public static final UniqueKey<AuthorRecord> AUTHOR_PKEY = Internal.createUniqueKey(Author.AUTHOR, "AUTHOR_pkey", new TableField[] { Author.AUTHOR.ID }, true);
    }

    private static class ForeignKeys0 {
        public static final ForeignKey<ArticleRecord, AuthorRecord> ARTICLE__FK_AUTHOR_ID = Internal.createForeignKey(Keys.AUTHOR_PKEY, Article.ARTICLE, "fk_author_id", new TableField[] { Article.ARTICLE.AUTHOR_ID }, true);
    }
}
